# This will configure and build hpl
# User can configure the source path by specifying HPL_SRC_DIR,
#    the download path by specifying HPL_URL, or the installed 
#    location by specifying HPL_INSTALL_DIR


# Intialize download/src/install vars
SET( HPL_BUILD_DIR "${CMAKE_BINARY_DIR}/HPL-prefix/src/HPL-build" )
IF ( HPL_URL ) 
    MESSAGE("   HPL_URL = ${HPL_URL}")
    SET( HPL_CMAKE_URL            "${HPL_URL}"       )
    SET( HPL_CMAKE_DOWNLOAD_DIR   "${HPL_BUILD_DIR}" )
    SET( HPL_CMAKE_SOURCE_DIR     "${HPL_BUILD_DIR}" )
    SET( HPL_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/hpl" )
    SET( CMAKE_BUILD_HPL TRUE )
ELSEIF ( HPL_SRC_DIR )
    VERIFY_PATH("${HPL_SRC_DIR}")
    MESSAGE("   HPL_SRC_DIR = ${HPL_SRC_DIR}" )
    SET( HPL_CMAKE_URL            ""                  )
    SET( HPL_CMAKE_DOWNLOAD_DIR   ""                  )
    SET( HPL_CMAKE_SOURCE_DIR     "${HPL_SRC_DIR}" )
    SET( HPL_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/hpl" )
    SET( CMAKE_BUILD_HPL TRUE )
ELSEIF ( HPL_INSTALL_DIR ) 
    SET( HPL_CMAKE_INSTALL_DIR "${HPL_INSTALL_DIR}" )
    SET( CMAKE_BUILD_HPL FALSE )
ELSE()
    MESSAGE(FATAL_ERROR "Please specify HPL_SRC_DIR, HPL_URL, or HPL_INSTALL_DIR")
ENDIF()
IF ( ${CMAKE_BUILD_TYPE} STREQUAL "Debug" )
    SET( HPL_METHOD dbg )
ELSEIF ( ${CMAKE_BUILD_TYPE} STREQUAL "Release" )
    SET( HPL_METHOD opt )
ELSE()
    MESSAGE ( FATAL_ERROR "Unknown CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" )
ENDIF()
SET( HPL_HOSTTYPE x86_64-unknown-linux-gnu )
SET( HPL_INSTALL_DIR "${HPL_CMAKE_INSTALL_DIR}" )
MESSAGE( "   HPL_INSTALL_DIR = ${HPL_INSTALL_DIR}" )


# Configure hpl
IF ( CMAKE_BUILD_HPL )
   
    # Create Make.Linux
    SET( HPL_MAKE "${CMAKE_BINARY_DIR}/HPL-prefix/src/Make.Linux" )
    FILE( WRITE "${HPL_MAKE}"  "\n# Configure file for HPL (autogenerated)\n" )
    FILE( WRITE "${HPL_MAKE}"  "\n# shell\n" )
    FILE( APPEND "${HPL_MAKE}" "SHELL        = /bin/sh\n" )
    FILE( APPEND "${HPL_MAKE}" "CD           = cd\n" )
    FILE( APPEND "${HPL_MAKE}" "CP           = cp\n" )
    FILE( APPEND "${HPL_MAKE}" "LN_S         = ln -fs\n" )
    FILE( APPEND "${HPL_MAKE}" "MKDIR        = mkdir -p\n" )
    FILE( APPEND "${HPL_MAKE}" "RM           = /bin/rm -f\n" )
    FILE( APPEND "${HPL_MAKE}" "TOUCH        = touch\n" )
    FILE( APPEND "${HPL_MAKE}" "MKDIR        = mkdir -p\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# Platform\n" )
    FILE( APPEND "${HPL_MAKE}" "ARCH         = Linux\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# HPL Directories\n" )
    FILE( APPEND "${HPL_MAKE}" "TOPdir       = ${HPL_CMAKE_SOURCE_DIR}\n" )
    FILE( APPEND "${HPL_MAKE}" "INCdir       = ${HPL_CMAKE_SOURCE_DIR}/include\n" )
    FILE( APPEND "${HPL_MAKE}" "BINdir       = ${HPL_CMAKE_SOURCE_DIR}/bin\n" )
    FILE( APPEND "${HPL_MAKE}" "LIBdir       = ${HPL_CMAKE_SOURCE_DIR}/lib\n" )
    FILE( APPEND "${HPL_MAKE}" "HPLlib       = ${HPL_CMAKE_SOURCE_DIR}/lib/libhpl.a\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# MPI\n" )
    #IF ( USE_MPI )
    #    FILE( APPEND "${HPL_MAKE}"  "MPdir        = /opt/intel/mpi/4.1.0\n" )
    #    FILE( APPEND "${HPL_MAKE}"  "MPinc        = -I$(MPdir)/include64\n" )
    #    FILE( APPEND "${HPL_MAKE}"  "MPlib        = $(MPdir)/lib64/libmpi.a\n" )
    #ENDIF()
    FILE( APPEND "${HPL_MAKE}"  "\n# Linear Algebra library\n" )
    FILE( APPEND "${HPL_MAKE}"  "LAdir        = ${BLAS_DIR}\n" )
    FILE( APPEND "${HPL_MAKE}"  "LAinc        = ${BLAS_DIR}\n" )
    FILE( APPEND "${HPL_MAKE}"  "LAlib        =" )
    FOREACH ( lib ${BLAS_LIBS} )
        FILE( APPEND "${HPL_MAKE}"  " ${lib}" )
    ENDFOREACH()
    FILE( APPEND "${HPL_MAKE}"  "\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# F77 / C interface\n" )
    FILE( APPEND "${HPL_MAKE}"  "F2CDEFS      = -DAdd_ -DF77_INTEGER=int -DStringSunStyle\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# HPL includes / libraries\n" )
    FILE( APPEND "${HPL_MAKE}"  "HPL_INCLUDES = -I$(INCdir) -I$(INCdir)/$(ARCH) -I$(LAinc) $(MPinc)\n" )
    FILE( APPEND "${HPL_MAKE}"  "HPL_LIBS     = $(HPLlib) $(LAlib) $(MPlib) -lgfortran\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# Compile time options\n" )
    FILE( APPEND "${HPL_MAKE}"  "HPL_OPTS     = -DHPL_DETAILED_TIMING -DHPL_PROGRESS_REPORT\n" )
    FILE( APPEND "${HPL_MAKE}"  "HPL_DEFS     = $(F2CDEFS) $(HPL_OPTS) $(HPL_INCLUDES)\n" )
    FILE( APPEND "${HPL_MAKE}"  "\n# Compilers / linkers\n" )
    FILE( APPEND "${HPL_MAKE}"  "CC       = ${CMAKE_C_COMPILER}\n" )
    FILE( APPEND "${HPL_MAKE}"  "CCNOOPT  = $(HPL_DEFS)\n" )
    FILE( APPEND "${HPL_MAKE}"  "OMP_DEFS = -fopenmp\n" )
    FILE( APPEND "${HPL_MAKE}"  "CCFLAGS  = ${CMAKE_C_FLAGS} $(HPL_DEFS)\n" )
    FILE( APPEND "${HPL_MAKE}"  "LINKER       = $(CC)\n" )
    FILE( APPEND "${HPL_MAKE}"  "LINKFLAGS    = $(CCFLAGS) $(OMP_DEFS)\n" )
    FILE( APPEND "${HPL_MAKE}"  "ARCHIVER     = ar\n" )
    FILE( APPEND "${HPL_MAKE}"  "ARFLAGS      = r\n" )
    FILE( APPEND "${HPL_MAKE}"  "RANLIB       = echo\n" )
ENDIF()


# Build hpl
IF ( CMAKE_BUILD_HPL )
    EXTERNALPROJECT_ADD( 
        HPL
        URL                 "${HPL_CMAKE_URL}"
        DOWNLOAD_DIR        "${HPL_CMAKE_DOWNLOAD_DIR}"
        SOURCE_DIR          "${HPL_CMAKE_SOURCE_DIR}"
        UPDATE_COMMAND      ""
        CONFIGURE_COMMAND   ${CMAKE_COMMAND} -E copy ${HPL_MAKE} ${HPL_CMAKE_SOURCE_DIR}/Make.Linux
        BUILD_COMMAND       make arch=Linux VERBOSE=1
        BUILD_IN_SOURCE     0
        INSTALL_COMMAND     ${CMAKE_COMMAND} -E copy_directory ${HPL_CMAKE_SOURCE_DIR}/include ${HPL_INSTALL_DIR}/include
                COMMAND     ${CMAKE_COMMAND} -E copy_directory ${HPL_CMAKE_SOURCE_DIR}/lib ${HPL_INSTALL_DIR}/lib
                COMMAND     ${CMAKE_COMMAND} -E copy_directory ${HPL_CMAKE_SOURCE_DIR}/bin ${HPL_INSTALL_DIR}/bin
        DEPENDS             LAPACK
        LOG_DOWNLOAD 1   LOG_UPDATE 1   LOG_CONFIGURE 1   LOG_BUILD 1   LOG_TEST 1   LOG_INSTALL 1
    )
    ADD_TPL_SAVE_LOGS( HPL )
    ADD_TPL_CLEAN( HPL )
ELSE()
    ADD_TPL_EMPTY( HPL )
ENDIF()


# Add the appropriate fields to FindTPLs.cmake


