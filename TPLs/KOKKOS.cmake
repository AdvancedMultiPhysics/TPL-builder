# This will configure and build kokkos
# User can configure the source path by specifying KOKKOS_SRC_DIR,
#    the download path by specifying KOKKOS_URL, or the installed 
#    location by specifying KOKKOS_INSTALL_DIR


# Check if we have an external Trilinos (we will build Kokkos through it)
SET( TRILINOS_KOKKOS )
LIST( FIND TPL_LIST "TRILINOS" index_trilinos )
IF ( ${index_trilinos} GREATER -1 )
    SET( TRILINOS_KOKKOS TRUE )
ENDIF()
IF ( ( KOKKOS_URL OR KOKKOS_SRC_DIR ) AND TRILINOS_KOKKOS )
    MESSAGE( FATAL_ERROR "Cannot build Trilinos and external Kokkos."
             "   Please remove Trilinos or KOKKOS_URL/KOKKOS_SRC_DIR" )
ENDIF()


# Intialize download/src/install vars
SET( KOKKOS_BUILD_DIR "${CMAKE_BINARY_DIR}/KOKKOS-prefix/src/KOKKOS-build" )
IF ( KOKKOS_URL ) 
    MESSAGE("   KOKKOS_URL = ${KOKKOS_URL}")
    SET( KOKKOS_SRC_DIR "${CMAKE_BINARY_DIR}/KOKKOS-prefix/src/KOKKOS-src" )
    SET( KOKKOS_CMAKE_URL            "${KOKKOS_URL}"       )
    SET( KOKKOS_CMAKE_DOWNLOAD_DIR   "${KOKKOS_SRC_DIR}" )
    SET( KOKKOS_CMAKE_SOURCE_DIR     "${KOKKOS_SRC_DIR}" )
    SET( KOKKOS_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/kokkos" )
    SET( CMAKE_BUILD_KOKKOS TRUE )
ELSEIF ( KOKKOS_SRC_DIR )
    VERIFY_PATH("${KOKKOS_SRC_DIR}")
    MESSAGE("   KOKKOS_SRC_DIR = ${KOKKOS_SRC_DIR}")
    SET( KOKKOS_CMAKE_URL            ""   )
    SET( KOKKOS_CMAKE_DOWNLOAD_DIR   "" )
    SET( KOKKOS_CMAKE_SOURCE_DIR     "${KOKKOS_SRC_DIR}" )
    SET( KOKKOS_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/kokkos" )
    SET( CMAKE_BUILD_KOKKOS TRUE )
ELSEIF ( TRILINOS_KOKKOS )
    SET( KOKKOS_CMAKE_URL            "" )
    SET( KOKKOS_CMAKE_DOWNLOAD_DIR   "" )
    SET( KOKKOS_CMAKE_SOURCE_DIR     "${TRILINOS_CMAKE_SOURCE_DIR}/packages/kokkos" )
    SET( KOKKOS_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/trilinos" )
    SET( CMAKE_BUILD_KOKKOS FALSE )
ELSEIF ( KOKKOS_INSTALL_DIR ) 
    SET( KOKKOS_CMAKE_INSTALL_DIR "${KOKKOS_INSTALL_DIR}" )
    SET( CMAKE_BUILD_KOKKOS FALSE )
ELSE()
    MESSAGE(FATAL_ERROR "Please specify KOKKOS_SRC_DIR, KOKKOS_URL, or KOKKOS_INSTALL_DIR")
ENDIF()
IF ( TRILINOS_KOKKOS )
    SET( KOKKOS_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/trilinos" )
ELSE()
    SET( KOKKOS_INSTALL_DIR "${KOKKOS_CMAKE_INSTALL_DIR}" )
ENDIF()
MESSAGE( "   KOKKOS_URL = ${KOKKOS_URL}" )
MESSAGE( "   KOKKOS_SRC_DIR = ${KOKKOS_SRC_DIR}" )
MESSAGE( "   KOKKOS_INSTALL_DIR = ${KOKKOS_INSTALL_DIR}" )


# Configure kokkos (these flags will also be used by Trilinos)
IF ( NOT DEFINED KOKKOS_CXX_STD )
    SET( KOKKOS_CXX_STD ${CXX_STD} )
ENDIF()
SET( KOKKOS_CONFIGURE_OPTIONS -DCMAKE_INSTALL_PREFIX=${KOKKOS_CMAKE_INSTALL_DIR} )
SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} )
SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_STANDARD=${KOKKOS_CXX_STD} )
IF ( NOT DEFINED KOKKOS_USE_CUDA )
    SET( KOKKOS_USE_CUDA ${USE_CUDA} )
ENDIF()
IF ( NOT DEFINED KOKKOS_USE_HIP )
    SET( KOKKOS_USE_HIP ${USE_HIP} )
ENDIF()
IF ( NOT DEFINED KOKKOS_USE_OPENMP )
    SET( KOKKOS_USE_OPENMP ${USE_OPENMP} )
ENDIF()
SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_SERIAL=ON )
IF ( KOKKOS_USE_OPENMP )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_OPENMP=ON )
ENDIF()
IF ( KOKKOS_USE_CUDA )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_CUDA=ON )
    IF ( NOT KOKKOS_CUDA_ARCH )
        SET( KOKKOS_CUDA_ARCH ${CUDA_ARCH_FLAGS} )
    ENDIF()
    IF ( NOT KOKKOS_HOST_COMPILER )
        SET( KOKKOS_HOST_COMPILER ${CMAKE_CXX_COMPILER} )
    ENDIF()
    IF ( NOT KOKKOS_CUDA_COMPILER )
        SET( KOKKOS_CUDA_COMPILER ${CMAKE_CUDA_COMPILER} )
    ENDIF()
    IF ( KOKKOS_ARCH_FLAGS )
        SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} ${KOKKOS_ARCH_FLAGS} )
    ENDIF()
    # Set more options
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    #SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${KOKKOS_BUILD_DIR}/nvcc_wrapper )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_USE_ATOMICS=OFF )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_CUDA_LAMBDA=ON )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_CUDA_CONSTEXPR=ON )
    SET( KOKKOS_OPTIONS ${KOKKOS_OPTIONS} -DKokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE=ON )
    MESSAGE("   KOKKOS configured with cuda:")
    MESSAGE("      KOKKOS_CUDA_ARCH=${KOKKOS_CUDA_ARCH}")
    MESSAGE("      KOKKOS_ARCH_FLAGS=${KOKKOS_ARCH_FLAGS}")
    MESSAGE("      KOKKOS_CUDA_COMPILER=${KOKKOS_CUDA_COMPILER}")
    MESSAGE("      KOKKOS_HOST_COMPILER=${KOKKOS_HOST_COMPILER}")
    MESSAGE("      KOKKOS_CUDA_CXX_FLAGS=${KOKKOS_CUDA_CXX_FLAGS}")
ELSEIF ( KOKKOS_USE_HIP )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP=ON )
    IF ( NOT KOKKOS_HIP_ARCH )
        SET( KOKKOS_HIP_ARCH ${HIP_ARCH} )
    ENDIF()
    IF ( NOT KOKKOS_HOST_COMPILER )
        SET( KOKKOS_HOST_COMPILER ${CMAKE_CXX_COMPILER} )
    ENDIF()
    IF ( KOKKOS_ARCH_FLAGS )
        SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} ${KOKKOS_ARCH_FLAGS} )
    ENDIF()
    # Set more options
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_USE_ATOMICS=OFF )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP_LAMBDA=ON )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP_CONSTEXPR=ON )
    MESSAGE("   KOKKOS configured with hip:")
    MESSAGE("      KOKKOS_HIP_ARCH=${KOKKOS_HIP_ARCH}")
    MESSAGE("      KOKKOS_ARCH_FLAGS=${KOKKOS_ARCH_FLAGS}")
    MESSAGE("      KOKKOS_HOST_COMPILER=${KOKKOS_HOST_COMPILER}")
    MESSAGE("      KOKKOS_HIP_CXX_FLAGS=${KOKKOS_HIP_CXX_FLAGS}")
ELSE()
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    MESSAGE("   KOKKOS configured without cuda/hip")
ENDIF()
IF ( ENABLE_SHARED AND ENABLE_STATIC )
    MESSAGE(FATAL_ERROR "Compiling kokkos with both static and shared libraries is not yet supported")
ELSEIF ( ENABLE_SHARED )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DBUILD_SHARED_LIBS=ON )
ELSEIF ( ENABLE_STATIC )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} )
ENDIF()


# Configure kokkos (these flags will also be used by Trilinos)
MESSAGE("   KOKKOS configure options: ${KOKKOS_CONFIGURE_OPTIONS}")
SET( KOKKOS_CONFIGURE_OPTIONS -DCMAKE_INSTALL_PREFIX=${KOKKOS_CMAKE_INSTALL_DIR} )
SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_STANDARD=${KOKKOS_CXX_STD} )
SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} )
SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_SERIAL=ON )
IF ( KOKKOS_USE_OPENMP )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_OPENMP=ON )
ENDIF()
IF ( KOKKOS_USE_CUDA )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_CUDA=ON )
    IF ( NOT KOKKOS_CUDA_ARCH )
        SET( KOKKOS_CUDA_ARCH ${CUDA_ARCH} )
    ENDIF()
    IF ( NOT KOKKOS_HOST_COMPILER )
        SET( KOKKOS_HOST_COMPILER ${CMAKE_CXX_COMPILER} )
    ENDIF()
    IF ( KOKKOS_ARCH_FLAGS )
        SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} ${KOKKOS_ARCH_FLAGS} )
    ENDIF()
    # Set more options
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_USE_ATOMICS=OFF )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_CUDA_LAMBDA=ON )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_CUDA_CONSTEXPR=ON )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE=ON )
    MESSAGE("   KOKKOS configured with cuda:")
    MESSAGE("      KOKKOS_CUDA_ARCH=${KOKKOS_CUDA_ARCH}")
    MESSAGE("      KOKKOS_ARCH_FLAGS=${KOKKOS_ARCH_FLAGS}")
    MESSAGE("      KOKKOS_HOST_COMPILER=${KOKKOS_HOST_COMPILER}")
    MESSAGE("      KOKKOS_CUDA_CXX_FLAGS=${KOKKOS_CUDA_CXX_FLAGS}")
ELSE()
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    MESSAGE("   KOKKOS configured without cuda")
ENDIF()
IF ( KOKKOS_USE_HIP )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP=ON )
    IF ( NOT KOKKOS_HIP_ARCH )
        SET( KOKKOS_HIP_ARCH ${HIP_ARCH} )
    ENDIF()
    IF ( NOT KOKKOS_HOST_COMPILER )
        SET( KOKKOS_HOST_COMPILER ${CMAKE_CXX_COMPILER} )
    ENDIF()
    IF ( KOKKOS_ARCH_FLAGS )
        SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} ${KOKKOS_ARCH_FLAGS} )
    ENDIF()
    # Set more options
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    #SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${KOKKOS_BUILD_DIR}/nvcc_wrapper )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_USE_ATOMICS=OFF )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP_LAMBDA=ON )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DKokkos_ENABLE_HIP_CONSTEXPR=ON )
    MESSAGE("   KOKKOS configured with hip:")
    MESSAGE("      KOKKOS_HIP_ARCH=${KOKKOS_HIP_ARCH}")
    MESSAGE("      KOKKOS_ARCH_FLAGS=${KOKKOS_ARCH_FLAGS}")
    MESSAGE("      KOKKOS_HOST_COMPILER=${KOKKOS_HOST_COMPILER}")
    MESSAGE("      KOKKOS_HIP_CXX_FLAGS=${KOKKOS_HIP_CXX_FLAGS}")
ELSE()
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} )
    MESSAGE("   KOKKOS configured without hip")
ENDIF()
IF ( ENABLE_SHARED AND ENABLE_STATIC )
    MESSAGE(FATAL_ERROR "Compiling kokkos with both static and shared libraries is not yet supported")
ELSEIF ( ENABLE_SHARED )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} -DBUILD_SHARED_LIBS=ON )
ELSEIF ( ENABLE_STATIC )
    SET( KOKKOS_CONFIGURE_OPTIONS ${KOKKOS_CONFIGURE_OPTIONS} )
ENDIF()
MESSAGE("   KOKKOS configure options: ${KOKKOS_CONFIGURE_OPTIONS}")


# Build kokkos
IF ( CMAKE_BUILD_KOKKOS )
    INCLUDE( NVCC )
    IF( TRILINOS_KOKKOS AND KOKKOS_SRC_DIR )
        MESSAGE( "   Building Kokkos through Trilinos" )
        ADD_TPL( 
            KOKKOS
            URL                 "${KOKKOS_CMAKE_URL}"
            DOWNLOAD_DIR        "${KOKKOS_CMAKE_DOWNLOAD_DIR}"
            SOURCE_DIR          "${KOKKOS_CMAKE_SOURCE_DIR}"
            CONFIGURE_COMMAND   cmake -E true
            BUILD_COMMAND       cmake -E true
            INSTALL_COMMAND     cmake -E true
            LOG_DOWNLOAD 1   LOG_UPDATE 1   LOG_CONFIGURE 1
        )
        INSTALL_NVCC( KOKKOS )
    ELSE()
        MESSAGE( "   Building standalone Kokkos" )
        ADD_TPL( 
            KOKKOS
            URL                 "${KOKKOS_CMAKE_URL}"
            DOWNLOAD_DIR        "${KOKKOS_CMAKE_DOWNLOAD_DIR}"
            SOURCE_DIR          "${KOKKOS_CMAKE_SOURCE_DIR}"
            UPDATE_COMMAND      ""
            CMAKE_ARGS          ${KOKKOS_CONFIGURE_OPTIONS} ${KOKKOS_OPTIONS}
            BUILD_COMMAND       $(MAKE) VERBOSE=1
            BUILD_IN_SOURCE     0
            INSTALL_COMMAND     $(MAKE) install; 
            LOG_DOWNLOAD 1   LOG_UPDATE 1   LOG_CONFIGURE 1   LOG_BUILD 1   LOG_TEST 1   LOG_INSTALL 1
        )
        INSTALL_NVCC( KOKKOS )
    ENDIF()
ELSE()
    ADD_TPL_EMPTY( KOKKOS )
ENDIF()

# Add the appropriate fields to FindTPLs.cmake
FILE( APPEND "${FIND_TPLS_CMAKE}" "\n# Find KOKKOS\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "IF ( TPLs_FIND_KOKKOS AND NOT TPLs_KOKKOS_FOUND )\n" )
IF ( KOKKOS_USE_CUDA )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( Kokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE TRUE )\n" )
ENDIF()
FILE( APPEND "${FIND_TPLS_CMAKE}" "    FIND_PACKAGE( Kokkos REQUIRED PATHS \"${KOKKOS_INSTALL_DIR}\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( KOKKOS_INSTALL_DIR \"${KOKKOS_INSTALL_DIR}\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( KOKKOS_INCLUDE_DIR \"${KOKKOS_INSTALL_DIR}/include\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    ADD_TPL_LIBRARY( KOKKOS Kokkos::kokkos )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "ENDIF()\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "\n" )

