# This will configure and build ogre
# User can configure the source path by specifying OGRE_SRC_DIR,
#    the download path by specifying OGRE_URL, or the installed 
#    location by specifying OGRE_INSTALL_DIR


# Intialize download/src/install vars
SET( OGRE_BUILD_DIR "${CMAKE_BINARY_DIR}/OGRE-prefix/src/OGRE-build" )
IF ( OGRE_URL ) 
    MESSAGE_TPL("   OGRE_URL = ${OGRE_URL}")
    SET( OGRE_SRC_DIR "${CMAKE_BINARY_DIR}/OGRE-prefix/src/OGRE-src" )
    SET( OGRE_CMAKE_URL            "${OGRE_URL}"     )
    SET( OGRE_CMAKE_DOWNLOAD_DIR   "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_SOURCE_DIR     "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CMAKE_BUILD_OGRE TRUE )
ELSEIF ( OGRE_SRC_DIR )
    VERIFY_PATH("${OGRE_SRC_DIR}")
    MESSAGE_TPL("   OGRE_SRC_DIR = ${OGRE_SRC_DIR}")
    SET( OGRE_CMAKE_URL            ""                  )
    SET( OGRE_CMAKE_DOWNLOAD_DIR   ""                  )
    SET( OGRE_CMAKE_SOURCE_DIR     "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CMAKE_BUILD_OGRE TRUE )
ELSEIF ( OGRE_INSTALL_DIR ) 
    SET( OGRE_CMAKE_INSTALL_DIR "${OGRE_INSTALL_DIR}" )
    SET( CMAKE_BUILD_OGRE FALSE )
ELSE()
    MESSAGE(FATAL_ERROR "Please specify OGRE_SRC_DIR, OGRE_URL, or OGRE_INSTALL_DIR")
ENDIF()
SET( OGRE_INSTALL_DIR "${OGRE_CMAKE_INSTALL_DIR}" )
MESSAGE_TPL( "   OGRE_INSTALL_DIR = ${OGRE_INSTALL_DIR}" )
FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(OGRE_INSTALL_DIR \"${OGRE_INSTALL_DIR}\")\n" )


# Configure ogre
IF ( CMAKE_BUILD_OGRE )
    SET( CONFIGURE_OPTIONS "${CMAKE_ARGS};-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" )
    SET( OGRE_DEPENDENCIES_DIR "${BOOST_INSTALL_DIR}" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBoost_NO_BOOST_CMAKE=TRUE;-DBoost_NO_SYSTEM_PATHS=TRUE" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBOOST_ROOT=${BOOST_INSTALL_DIR};-DBOOST_LIBRARYDIR=${BOOST_INSTALL_DIR}/lib" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBoost_LIBRARY_DIR_DEBUG=${BOOST_INSTALL_DIR}/lib;-DBoost_LIBRARY_DIR_RELEASE=${BOOST_INSTALL_DIR}/lib" )
    #IF ( ENABLE_SHARED AND ENABLE_STATIC )
    #    MESSAGE(FATAL_ERROR "Compiling libmesh with both static and shared libraries is not supported")
    #ELSEIF ( ENABLE_SHARED )
    #    SET( CONFIGURE_OPTIONS ${CONFIGURE_OPTIONS} )
    #ELSEIF ( ENABLE_STATIC )
    #    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(OGRE_STATIC TRUE)\n" )
    #    SET( CONFIGURE_OPTIONS ${CONFIGURE_OPTIONS};-DOGRE_STATIC=TRUE;-DBoost_USE_STATIC_LIBS=TRUE )
    #ENDIF()
    IF ( BOOST_ONLY_COPY_HEADERS )
        MESSAGE(FATAL_ERROR "Ogre requires the boost libraries")
    ENDIF()
    SET( PARALLEL_BUILD_OPTIONS )
    IF ( PROCS_INSTALL )
        IF ( ${PROCS_INSTALL} GREATER "1" )
            SET( PARALLEL_BUILD_OPTIONS -j ${PROCS_INSTALL} )
        ENDIF()
    ENDIF()
ENDIF()


# Build ogre
IF ( CMAKE_BUILD_OGRE )
    EXTERNALPROJECT_ADD(
        OGRE
        URL                 "${OGRE_CMAKE_URL}"
        DOWNLOAD_DIR        "${OGRE_CMAKE_DOWNLOAD_DIR}"
        SOURCE_DIR          "${OGRE_CMAKE_SOURCE_DIR}"
        UPDATE_COMMAND      ""
        BUILD_IN_SOURCE     0
        INSTALL_DIR         ${CMAKE_INSTALL_PREFIX}/ogre
        CMAKE_ARGS          "${CONFIGURE_OPTIONS}"
        BUILD_COMMAND       ${CMAKE_MAKE_PROGRAM} install ${PARALLEL_BUILD_OPTIONS} VERBOSE=1
        DEPENDS             BOOST
        LOG_DOWNLOAD 1   LOG_UPDATE 1   LOG_CONFIGURE 1   LOG_BUILD 1   LOG_TEST 1   LOG_INSTALL 1
    )
    ADD_TPL_SAVE_LOGS( OGRE )
    ADD_TPL_CLEAN( OGRE )
ELSE()
    ADD_TPL_EMPTY( OGRE )
ENDIF()

