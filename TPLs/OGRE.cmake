# This will configure and build ogre
# User can configure the source path by specifying OGRE_SRC_DIR,
#    the download path by specifying OGRE_URL, or the installed 
#    location by specifying OGRE_INSTALL_DIR


# Intialize download/src/install vars
SET( OGRE_BUILD_DIR "${CMAKE_BINARY_DIR}/OGRE-prefix/src/OGRE-build" )
IF ( OGRE_URL ) 
    MESSAGE("   OGRE_URL = ${OGRE_URL}")
    SET( OGRE_SRC_DIR "${CMAKE_BINARY_DIR}/OGRE-prefix/src/OGRE-src" )
    SET( OGRE_CMAKE_URL            "${OGRE_URL}"     )
    SET( OGRE_CMAKE_DOWNLOAD_DIR   "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_SOURCE_DIR     "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CMAKE_BUILD_OGRE TRUE )
ELSEIF ( OGRE_SRC_DIR )
    VERIFY_PATH("${OGRE_SRC_DIR}")
    MESSAGE("   OGRE_SRC_DIR = ${OGRE_SRC_DIR}")
    SET( OGRE_CMAKE_URL            ""                  )
    SET( OGRE_CMAKE_DOWNLOAD_DIR   ""                  )
    SET( OGRE_CMAKE_SOURCE_DIR     "${OGRE_SRC_DIR}" )
    SET( OGRE_CMAKE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CMAKE_BUILD_OGRE TRUE )
ELSEIF ( OGRE_INSTALL_DIR ) 
    SET( OGRE_CMAKE_INSTALL_DIR "${OGRE_INSTALL_DIR}" )
    SET( CMAKE_BUILD_OGRE FALSE )
ELSE()
    MESSAGE(FATAL_ERROR "Please specify OGRE_SRC_DIR, OGRE_URL, or OGRE_INSTALL_DIR")
ENDIF()
SET( OGRE_INSTALL_DIR "${OGRE_CMAKE_INSTALL_DIR}" )
MESSAGE( "   OGRE_INSTALL_DIR = ${OGRE_INSTALL_DIR}" )


# Configure ogre
IF ( CMAKE_BUILD_OGRE )
    SET( CONFIGURE_OPTIONS "${CMAKE_ARGS};-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/ogre" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" )
    SET( OGRE_DEPENDENCIES_DIR "${BOOST_INSTALL_DIR}" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBoost_NO_BOOST_CMAKE=TRUE;-DBoost_NO_SYSTEM_PATHS=TRUE" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBOOST_ROOT=${BOOST_INSTALL_DIR};-DBOOST_LIBRARYDIR=${BOOST_INSTALL_DIR}/lib" )
    SET( CONFIGURE_OPTIONS "${CONFIGURE_OPTIONS};-DBoost_LIBRARY_DIR_DEBUG=${BOOST_INSTALL_DIR}/lib;-DBoost_LIBRARY_DIR_RELEASE=${BOOST_INSTALL_DIR}/lib" )
    #IF ( ENABLE_SHARED AND ENABLE_STATIC )
    #    MESSAGE(FATAL_ERROR "Compiling libmesh with both static and shared libraries is not supported")
    #ELSEIF ( ENABLE_SHARED )
    #    SET( CONFIGURE_OPTIONS ${CONFIGURE_OPTIONS} )
    #ELSEIF ( ENABLE_STATIC )
    #    SET( CONFIGURE_OPTIONS ${CONFIGURE_OPTIONS};-DOGRE_STATIC=TRUE;-DBoost_USE_STATIC_LIBS=TRUE )
    #ENDIF()
    IF ( BOOST_ONLY_COPY_HEADERS )
        MESSAGE(FATAL_ERROR "Ogre requires the boost libraries")
    ENDIF()
    SET( PARALLEL_BUILD_OPTIONS )
    IF ( PROCS_INSTALL )
        IF ( ${PROCS_INSTALL} GREATER "1" )
            SET( PARALLEL_BUILD_OPTIONS -j ${PROCS_INSTALL} )
        ENDIF()
    ENDIF()
ENDIF()


# Build ogre
IF ( CMAKE_BUILD_OGRE )
    EXTERNALPROJECT_ADD(
        OGRE
        URL                 "${OGRE_CMAKE_URL}"
        DOWNLOAD_DIR        "${OGRE_CMAKE_DOWNLOAD_DIR}"
        SOURCE_DIR          "${OGRE_CMAKE_SOURCE_DIR}"
        UPDATE_COMMAND      ""
        BUILD_IN_SOURCE     0
        INSTALL_DIR         ${CMAKE_INSTALL_PREFIX}/ogre
        CMAKE_ARGS          "${CONFIGURE_OPTIONS}"
        BUILD_COMMAND       ${CMAKE_MAKE_PROGRAM} install ${PARALLEL_BUILD_OPTIONS} VERBOSE=1
        DEPENDS             BOOST
        LOG_DOWNLOAD 1   LOG_UPDATE 1   LOG_CONFIGURE 1   LOG_BUILD 1   LOG_TEST 1   LOG_INSTALL 1
    )
    ADD_TPL_SAVE_LOGS( OGRE )
    ADD_TPL_CLEAN( OGRE )
ELSE()
    ADD_TPL_EMPTY( OGRE )
ENDIF()


# Add the appropriate fields to FindTPLs.cmake
FILE( APPEND "${FIND_TPLS_CMAKE}" "\n# Find OGRE\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "IF ( TPLs_FIND_OGRE AND NOT TPL_FOUND_OGRE )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_DIR \"${OGRE_INSTALL_DIR}\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_DIRECTORY \"${OGRE_INSTALL_DIR}\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( CMAKE_MODULE_PATH \"$\{OGRE_DIRECTORY}/lib/OGRE/cmake\" $\{CMAKE_MODULE_PATH} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_HOME \"$\{OGRE_DIRECTORY}\" )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( ENV_ZLIB_HOME $\{ZLIB_DIRECTORY} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    FIND_PACKAGE( OGRE REQUIRED )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    FIND_PACKAGE( OIS REQUIRED )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_INCLUDE $\{OIS_INCLUDE_DIRS} $\{OGRE_INCLUDE_DIRS} $\{OGRE_SAMPLES_INCLUDEPATH} $\{OGRE_Overlay_INCLUDE_DIRS} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    KEEP_BUILD_LIBRARIES( OGRE_LIBRARIES )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    KEEP_BUILD_LIBRARIES( OIS_LIBRARIES )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    KEEP_BUILD_LIBRARIES( OGRE_Overlay_LIBRARIES )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_LIBS $\{OGRE_LIBRARIES} $\{OIS_LIBRARIES} $\{OGRE_Overlay_LIBRARIES} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    #IF ( NOT USE_EXT_X11 )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    #    SET( USE_EXT_X11 TRUE )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    #    CONFIGURE_X11_LIBRARIES()\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    #ENDIF()\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( TPL_INCLUDE_DIRS $\{TPL_INCLUDE_DIRS} $\{OGRE_INCLUDE} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( TPL_LIBRARIES $\{OGRE_LIBS} $\{TPL_LIBRARIES} )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( OGRE_FOUND TRUE )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "    SET( TPL_FOUND_OGRE TRUE )\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "ENDIF()\n" )
FILE( APPEND "${FIND_TPLS_CMAKE}" "\n" )

