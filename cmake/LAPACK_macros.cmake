# Set the system name
IF (CMAKE_SIZEOF_VOID_P MATCHES 8) 
    SET( SYSTEM_NAME "${CMAKE_SYSTEM_NAME}_64" ) 
ELSE()
    SET( SYSTEM_NAME "${CMAKE_SYSTEM_NAME}_32" ) 
ENDIF()


# Function to search for multiple libraries
FUNCTION( FIND_MULTIPLE_LIBRARIES LIST INSTALL_PATH ${ARGN} )
    SET( LIBRARIES )
    FOREACH ( tmp ${ARGN} )
        SET( lib_${tmp} )
        IF( ENABLE_SHARED )
            FIND_LIBRARY( lib_${tmp}  NAMES lib${tmp}.so    PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}_dll.lib  PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}          PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES lib${tmp}.a     PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}.lib      PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
        ELSE()
            FIND_LIBRARY( lib_${tmp}  NAMES lib${tmp}.a     PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}.lib      PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}          PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES lib${tmp}.so    PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
            FIND_LIBRARY( lib_${tmp}  NAMES ${tmp}_dll.lib  PATHS "${INSTALL_PATH}"  PATH_SUFFIXES "lib" "lib64"  NO_DEFAULT_PATH )
        ENDIF()
        IF ( lib_${tmp} )
            SET( LIBRARIES ${LIBRARIES} ${lib_${tmp}} )
        ENDIF()
    ENDFOREACH()
    SET( ${LIST} ${LIBRARIES} PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for ACML and set the appropriate variables
FUNCTION( CHECK_ACML INSTALL_PATH )
    VERIFY_PATH( "${INSTALL_PATH}" )
    IF ( NOT EXISTS "${INSTALL_PATH}/include" )
        RETURN()
    ENDIF()
    IF ( NOT EXISTS "${INSTALL_PATH}/lib" )
        RETURN()
    ENDIF()
    FIND_MULTIPLE_LIBRARIES( ACML_LIBS "${INSTALL_PATH}/lib" acml acml_mv )
    IF ( NOT ACML_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found ACML" )
    SET( ACML_LIBS "${ACML_LIBRARY}" )
    SET( ACML_LINK )
    FOREACH ( tmp ${ACML_LIBS} )
        SET( ACML_LINK ${ACML_LINK} "-Wl,${tmp}" )
    ENDFOREACH()
    SET( LAPACK_VENDOR "ACML" PARENT_SCOPE ) 
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( BLAS_DIR    "${INSTALL_PATH}/lib" PARENT_SCOPE )
    SET( LAPACK_DIR  "${INSTALL_PATH}/lib" PARENT_SCOPE )
    SET( BLAS_INCLUDE_DIRS "${INSTALL_PATH}/include" PARENT_SCOPE )
    SET( LAPACK_INCLUDE_DIRS "${INSTALL_PATH}/include" PARENT_SCOPE )
    SET( BLAS_LIBS   ${ACML_LIBS} PARENT_SCOPE )
    SET( LAPACK_LIBS ${ACML_LIBS} PARENT_SCOPE )
    SET( BLAS_LAPACK_LINK ${ACML_LINK} PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${INSTALL_PATH}/lib" PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for MKL and set the appropriate variables
FUNCTION( CHECK_MKL INSTALL_PATH )
    VERIFY_PATH( "${INSTALL_PATH}" )
    IF ( NOT MKL_INCLUDE_DIR )
        IF ( EXISTS "${INSTALL_PATH}/include" )
            SET( MKL_INCLUDE_DIR "${INSTALL_PATH}/include" )
        ELSE()
            SET( MKL_INCLUDE_DIR "${INSTALL_PATH}" )
        ENDIF()
    ENDIF()
    IF ( NOT MKL_LIB_DIR )
        IF ( EXISTS "${INSTALL_PATH}/lib" )
            SET( MKL_LIB_DIR "${INSTALL_PATH}/lib" )
        ELSE()
            SET( MKL_LIB_DIR "${INSTALL_PATH}" )
        ENDIF()
        IF ( EXISTS "${MKL_LIB_DIR}/intel64" )
            SET( MKL_LIB_DIR "${MKL_LIB_DIR}/intel64" )
        ENDIF()
    ENDIF()
    FIND_MULTIPLE_LIBRARIES( MKL_LIBS "${MKL_LIB_DIR}" mkl_gf_lp64 mkl_intel_lp64 mkl_lapack95_lp64 mkl_blas95_lp64 mkl_core mkl_sequential )
    IF ( NOT MKL_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found MKL: ${MKL_LIBS}" )
    STRING( REPLACE ";" " " MKL_GROUP "-Wl,--no-as-needed -Wl,--start-group ${MKL_LIBS} -Wl,--end-group" )
    IF ( ${SYSTEM_NAME} STREQUAL "Windows_32" OR ${SYSTEM_NAME} STREQUAL "Windows_64" )
        SET( MKL_LINK "" )
    ELSE()
        SET( MKL_LINK "${MKL_GROUP} -lpthread -lm" )
    ENDIF()
    SET( LAPACK_VENDOR "MKL" PARENT_SCOPE ) 
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( BLAS_INCLUDE_DIRS "${MKL_INCLUDE_DIR}" PARENT_SCOPE )
    SET( LAPACK_INCLUDE_DIRS "${MKL_INCLUDE_DIR}" PARENT_SCOPE )
    SET( BLAS_DIR       "${MKL_LIB_DIR}"  PARENT_SCOPE )
    SET( LAPACK_DIR     "${MKL_LIB_DIR}"  PARENT_SCOPE )
    SET( BLAS_LIBS      "${MKL_LIBS}"      PARENT_SCOPE )
    SET( LAPACK_LIBS    "${MKL_LIBS}"      PARENT_SCOPE )
    SET( BLAS_LAPACK_LINK "${MKL_LINK}"    PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${MKL_LIB_DIR}"    PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for vecLib and set the appropriate variables
FUNCTION( CHECK_VECLIB INSTALL_PATH )
    IF ( NOT APPLE )
        RETURN()
    ENDIF()
    VERIFY_PATH( "${INSTALL_PATH}" )
    IF ( NOT EXISTS "${INSTALL_PATH}/Headers" )
        RETURN()
    ENDIF()
    FIND_MULTIPLE_LIBRARIES( VECLIB_LIBS "${INSTALL_PATH}" BLAS LAPACK vMisc )
    IF ( NOT VECLIB_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found vecLib" )
    SET( VECLIB_LIBS "${LAPACK_LIBRARY}" "${BLAS_LIBRARY}" )
    SET( LAPACK_VENDOR "VECLIB" PARENT_SCOPE ) 
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( BLAS_DIR    "${INSTALL_PATH}" PARENT_SCOPE )
    SET( LAPACK_DIR  "${INSTALL_PATH}" PARENT_SCOPE )
    SET( BLAS_INCLUDE_DIRS "${INSTALL_PATH}/Headers" PARENT_SCOPE )
    SET( LAPACK_INCLUDE_DIRS "${INSTALL_PATH}/Headers" PARENT_SCOPE )
    SET( BLAS_LIBS   ${BLAS_LIBRARY} PARENT_SCOPE )
    SET( LAPACK_LIBS ${LAPACK_LIBRARY} PARENT_SCOPE )
    SET( BLAS_LAPACK_LINK ${LAPACK_LINK} ${BLAS_LIBRARY} PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${INSTALL_PATH}" PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for OpenBLAS and set the appropriate variables
FUNCTION( CHECK_OPENBLAS INSTALL_PATH CMAKE_FILE )
    VERIFY_PATH( "${INSTALL_PATH}" )
    IF ( NOT EXISTS "${INSTALL_PATH}/lib" )
        RETURN()
    ENDIF()
    FIND_MULTIPLE_LIBRARIES( OPENBLAS_LIBS "${INSTALL_PATH}" openblas )
    IF ( NOT OPENBLAS_LIBS )
        RETURN()
    ENDIF()
    IF ( EXISTS "${INSTALL_PATH}/include/cblas.h" )
        SET( OPENBLAS_INCLUDE_DIR "${INSTALL_PATH}/include" )
    ELSEIF( EXISTS "${INSTALL_PATH}/include/openblas/cblas.h" )
        SET( OPENBLAS_INCLUDE_DIR "${INSTALL_PATH}/include/openblas" )
    ELSE()
        RETURN()
    ENDIF()
    MESSAGE( "   Found OpenBLAS" )
    SET( OPENBLAS_LINK "-Wl,${OPENBLAS_LIBS}" )
    SET( LAPACK_VENDOR "OpenBLAS" PARENT_SCOPE ) 
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( BLAS_DIR    "${INSTALL_PATH}" PARENT_SCOPE )
    SET( LAPACK_DIR  "${INSTALL_PATH}" PARENT_SCOPE )
    SET( BLAS_INCLUDE_DIRS "${OPENBLAS_INCLUDE_DIR}" PARENT_SCOPE )
    SET( LAPACK_INCLUDE_DIRS "${OPENBLAS_INCLUDE_DIR}" PARENT_SCOPE )
    SET( BLAS_LIBS   ${OPENBLAS_LIBS} PARENT_SCOPE )
    SET( LAPACK_LIBS ${OPENBLAS_LIBS} PARENT_SCOPE )
    SET( BLAS_LAPACK_LINK ${OPENBLAS_LINK} PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${INSTALL_PATH}/lib" PARENT_SCOPE )
ENDFUNCTION()

  
# Macro to check for CRAY LIBSCI and set the appropriate variables
FUNCTION( CHECK_CRAY_LIBSCI INSTALL_PATH )
    VERIFY_PATH( "${INSTALL_PATH}" )
    IF ( NOT CRAY_LIBSCI_INCLUDE_DIR )
        IF ( EXISTS "${INSTALL_PATH}/include" )
            SET( CRAY_LIBSCI_INCLUDE_DIR "${INSTALL_PATH}/include" )
        ELSE()
            SET( CRAY_LIBSCI_INCLUDE_DIR "${INSTALL_PATH}" )
        ENDIF()
    ENDIF()
    IF ( NOT CRAY_LIBSCI_LIB_DIR )
        IF ( EXISTS "${INSTALL_PATH}/lib" )
            SET( CRAY_LIBSCI_LIB_DIR "${INSTALL_PATH}/lib" )
        ELSE()
            SET( CRAY_LIBSCI_LIB_DIR "${INSTALL_PATH}" )
        ENDIF()
    ENDIF()
    STRING( TOLOWER "${CMAKE_CXX_COMPILER_ID}" compiler )
    FIND_MULTIPLE_LIBRARIES( CRAY_LIBSCI_LIBS "${CRAY_LIBSCI_LIB_DIR}" sci_${compiler} sci_cray )
    IF ( NOT CRAY_LIBSCI_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found CRAY-LIBSCI: ${CRAY_LIBSCI_LIBS}" )
    SET( LAPACK_VENDOR "CRAY-LIBSCI" PARENT_SCOPE )
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( BLAS_DIR    "${INSTALL_PATH}" PARENT_SCOPE )
    SET( LAPACK_DIR  "${INSTALL_PATH}" PARENT_SCOPE )
    SET( BLAS_INCLUDE_DIRS "${CRAY_LIBSCI_INCLUDE_DIR}" PARENT_SCOPE )
    SET( LAPACK_INCLUDE_DIRS "${CRAY_LIBSCI_INCLUDE_DIR}" PARENT_SCOPE )
    SET( BLAS_LIBS   ${CRAY_LIBSCI_LIBS} PARENT_SCOPE )
    SET( LAPACK_LIBS ${CRAY_LIBSCI_LIBS} PARENT_SCOPE )
    SET( BLAS_LAPACK_LINK ${CRAY_LINK} PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${CRAY_LIBSCI_LIB_DIR}" PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for BLAS and set the appropriate variables
FUNCTION( CHECK_BLAS INSTALL_PATH )
    SET( BLAS_LIB_DIR "${INSTALL_PATH}" )
    IF ( INSTALL_PATH )
        SET( BLAS_LIB_DIR "${INSTALL_PATH}" )
    ENDIF()
    IF ( EXISTS "${BLAS_LIB_DIR}/${CMAKE_INSTALL_LIBDIR}" )
        SET( BLAS_LIB_DIR "${BLAS_LIB_DIR}/${CMAKE_INSTALL_LIBDIR}" )
    ENDIF()
    IF ( BLAS_LIB )
        FIND_MULTIPLE_LIBRARIES( BLAS_LIBS "${INSTALL_PATH}" ${BLAS_LIB} )
    ELSE()
        FIND_MULTIPLE_LIBRARIES( BLAS_LIBS "${INSTALL_PATH}" blas )
    ENDIF()
    IF ( NOT BLAS_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found BLAS" )
    SET( BLAS_FOUND true PARENT_SCOPE )
    SET( BLAS_DIR  "${INSTALL_PATH}" PARENT_SCOPE )
    SET( BLAS_LIBS  "${BLAS_LIBS}" PARENT_SCOPE )
ENDFUNCTION()


# Macro to check for LAPACK and set the appropriate variables
FUNCTION( CHECK_LAPACK INSTALL_PATH CMAKE_FILE )
    SET( LAPACK_LIB_DIR "${INSTALL_PATH}" )
    IF ( EXISTS "${INSTALL_PATH}/${CMAKE_INSTALL_LIBDIR}" )
        SET( LAPACK_LIB_DIR "${INSTALL_PATH}/${CMAKE_INSTALL_LIBDIR}" )
    ENDIF()
    IF ( LAPACK_LIB )
        FIND_MULTIPLE_LIBRARIES( LAPACK_LIBS "${LAPACK_LIB_DIR}" ${LAPACK_LIB} )
    ELSE()
        FIND_MULTIPLE_LIBRARIES( LAPACK_LIBS "${LAPACK_LIB_DIR}" lapack )
    ENDIF()
    IF ( NOT LAPACK_LIBS )
        RETURN()
    ENDIF()
    MESSAGE( "   Found LAPACK" )
    SET( LAPACK_VENDOR "Generic" PARENT_SCOPE ) 
    SET( LAPACK_FOUND true PARENT_SCOPE )
    SET( LAPACK_DIR  "${INSTALL_PATH}" PARENT_SCOPE )
    SET( LAPACK_LIBS "${LAPACK_LIBS}"     PARENT_SCOPE )
    SET( LAPACK_LIB_DIR "${LAPACK_LIB_DIR}" PARENT_SCOPE )
ENDFUNCTION()


MACRO( ADD_LIB_LIST LISTNAME LIBNAME )
    IF ( ${LIBNAME} )
        SET( ${LISTNAME} ${${LISTNAME}} ${${LIBNAME}} )
    ENDIF()
ENDMACRO()


