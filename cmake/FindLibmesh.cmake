FUNCTION ( LIBMESH_SET_INCLUDES  LIBMESH_DIRECTORY )
    VERIFY_PATH ( ${LIBMESH_DIRECTORY} )
    # Include the libmesh directories
    SET( LIBMESH_INCLUDE )
    SET( LIBMESH_INCLUDE ${LIBMESH_INCLUDE} ${LIBMESH_DIRECTORY}/include/ )
    SET( LIBMESH_INCLUDE ${LIBMESH_INCLUDE} PARENT_SCOPE )
ENDFUNCTION()


FUNCTION ( LIBMESH_SET_LIBRARIES  LIBMESH_DIRECTORY )
    VERIFY_PATH ( ${LIBMESH_DIRECTORY} )
    # Find the libmesh libaries
    FIND_LIBRARY( LIBMESH_MESH_LIB     NAMES mesh_dbg  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_MESH_LIB     NAMES mesh_opt  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_EXODUSII_LIB NAMES exodusii  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_LASPACK_LIB  NAMES laspack   PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_METIS_LIB    NAMES metis     PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_NEMESIS_LIB  NAMES nemesis   PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_NETCDF_LIB   NAMES netcdf    PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_PARMETIS_LIB NAMES parmetis  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_MPI_LIB      NAMES timpi_opt PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_MPI_LIB      NAMES timpi_dbg PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_SFCURVES_LIB NAMES sfcurves  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_GMV_LIB      NAMES gmv       PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_GZSTREAM_LIB NAMES gzstream  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_TETGEN_LIB   NAMES tetgen    PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    FIND_LIBRARY( LIBMESH_TRIANGLE_LIB NAMES triangle  PATHS ${LIBMESH_DIRECTORY}/lib ${LIBMESH_DIRECTORY}/lib64  NO_DEFAULT_PATH )
    #IF ( ${CMAKE_SYSTEM} MATCHES ^Linux.* )
    #    IF ( ${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL x86_64 )
    #        SET ( LIBMESH_TECIO_LIB  ${LIBMESH_DIRECTORY}/contrib/tecplot/lib/x86_64-unknown-linux-gnu/tecio.a )
    #    ENDIF ()
    #ENDIF ()
    # Check that the required libraries exist
    IF ( NOT LIBMESH_MESH_LIB )
        MESSAGE( FATAL_ERROR "Libmesh library (libmesh_opt/dbg) not found in ${LIBMESH_DIRECTORY}/${CMAKE_INSTALL_LIBDIR}" )
    ENDIF ()
    # Add the libraries in the appropriate order
    SET( LIBMESH_LIBS )
    ADD_LIBMESH_LIB( LIBMESH_MESH_LIB )
    ADD_LIBMESH_LIB( LIBMESH_EXODUSII_LIB )
    ADD_LIBMESH_LIB( LIBMESH_LASPACK_LIB )
    ADD_LIBMESH_LIB( LIBMESH_NEMESIS_LIB )
    ADD_LIBMESH_LIB( LIBMESH_NETCDF_LIB )
    ADD_LIBMESH_LIB( LIBMESH_PARMETIS_LIB )
    ADD_LIBMESH_LIB( LIBMESH_METIS_LIB )
    ADD_LIBMESH_LIB( LIBMESH_SFCURVES_LIB )
    ADD_LIBMESH_LIB( LIBMESH_GMV_LIB )
    ADD_LIBMESH_LIB( LIBMESH_GZSTREAM_LIB )
    ADD_LIBMESH_LIB( LIBMESH_TETGEN_LIB )
    ADD_LIBMESH_LIB( LIBMESH_TRIANGLE_LIB )
    ADD_LIBMESH_LIB( LIBMESH_TECIO_LIB )
    ADD_LIBMESH_LIB( LIBMESH_MPI_LIB )
    SET ( LIBMESH_LIBS ${LIBMESH_LIBS} PARENT_SCOPE )
ENDFUNCTION()


MACRO( ADD_LIBMESH_LIB LIBNAME )
    IF ( ${LIBNAME} )
        SET( LIBMESH_LIBS ${LIBMESH_LIBS} ${${LIBNAME}} )
    ENDIF()
ENDMACRO()


