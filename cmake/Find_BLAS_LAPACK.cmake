# Check that the PROJ and ${PROJ}_INSTALL/SOURCE_DIR variables are set 
IF ( NOT PROJ )
    MESSAGE(FATAL_ERROR "PROJ must be set before including macros.cmake")
ENDIF()
IF ( NOT ${PROJ}_INSTALL_DIR )
    MESSAGE(FATAL_ERROR "${PROJ}_INSTALL_DIR must be set before including macros.cmake")
ENDIF()
IF ( NOT ${PROJ}_SOURCE_DIR )
    MESSAGE(FATAL_ERROR "${PROJ}_SOURCE_DIR must be set before including macros.cmake")
ENDIF()
SET( BlasLapackCMakeDir "${CMAKE_CURRENT_LIST_DIR}/BlasLapack" )
SET( BlasLapackInstallDir "${${PROJ}_INSTALL_DIR}/include" )
INCLUDE( "${BlasLapackCMakeDir}/FindBLAS.cmake" )
INCLUDE( "${BlasLapackCMakeDir}/FindLAPACK.cmake" )


# Macro to configure BLAS and LAPACK libraries
FUNCTION( CONFIGURE_BLAS_AND_LAPACK )
    CHECK_ENABLE_FLAG( USE_ACML 0 )
    CHECK_ENABLE_FLAG( USE_MKL  0 )
    CHECK_ENABLE_FLAG( USE_MATLAB 0 )
    CHECK_ENABLE_FLAG( USE_MATLAB_LAPACK 0 )
    CHECK_ENABLE_FLAG( USE_BLAS   1 )
    CHECK_ENABLE_FLAG( USE_LAPACK 1 )
    # Write a file with the necessary includes for blas/lapack routines
    SET( BLAS_LAPACK_HEADER "${CMAKE_CURRENT_BINARY_DIR}/tmp/blas_lapack.h" )
    FILE(WRITE ${BLAS_LAPACK_HEADER} "// This is a automatically generated file to include blas/lapack headers\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#ifndef INCLUDE_BLAS_LAPACK\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#define INCLUDE_BLAS_LAPACK\n" )
    IF( USE_MATLAB AND USE_MATLAB_LAPACK ) 
        # Matlab requires using their lapack/blas
        SET( USE_BLAS 1 )
        SET( USE_LAPACK 1 )
        SET( USE_MATLAB 1 PARENT_SCOPE )
        SET( USE_MATLAB_LAPACK ${USE_MATLAB_LAPACK} PARENT_SCOPE )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_BLAS\n #define USE_BLAS\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_LAPACK\n #define USE_LAPACK\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_MATLAB_LAPACK\n #define USE_MATLAB_LAPACK\n #endif\n" )
        FIND_LIBRARY( BLAS_LIBS   NAMES mwblas          PATHS ${MATLAB_EXTERN}  NO_DEFAULT_PATH )
        FIND_LIBRARY( BLAS_LIBS   NAMES libmwblas.dll   PATHS ${MATLAB_EXTERN}  NO_DEFAULT_PATH )
        FIND_LIBRARY( LAPACK_LIBS NAMES mwlapack        PATHS ${MATLAB_EXTERN}  NO_DEFAULT_PATH )
        FIND_LIBRARY( LAPACK_LIBS NAMES libmwlapack.dll PATHS ${MATLAB_EXTERN}  NO_DEFAULT_PATH )
        IF ( (NOT BLAS_LIBS) OR (NOT LAPACK_LIBS) )
            MESSAGE("${BLAS_LIBS}")
            MESSAGE("${LAPACK_LIBS}")
            MESSAGE(FATAL_ERROR "Could not find MATLAB blas/lapack libraries in: ${MATLAB_EXTERN}")
        ENDIF()
        SET( BLAS_LAPACK_LIBS ${BLAS_LIBS} ${LAPACK_LIBS} )
        #IF ( USING_GCC )
        #    SET( BLAS_LAPACK_LIBS ${BLAS_LAPACK_LIBS} -lgfortran )
        #ENDIF()
        SET( BLAS_LAPACK_LIBS ${BLAS_LAPACK_LIBS} PARENT_SCOPE )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#include \"${MATLAB_DIRECTORY}/extern/include/tmwtypes.h\"\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#include \"${MATLAB_DIRECTORY}/extern/include/blas.h\"\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#include \"${MATLAB_DIRECTORY}/extern/include/lapack.h\"\n" )
    ELSEIF( USE_ACML ) 
        CONFIGURE_ACML()
        SET( USE_BLAS 1 )
        SET( USE_LAPACK 1 )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_BLAS\n #define USE_BLAS\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_LAPACK\n #define USE_LAPACK\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_ACML\n #define USE_ACML\n #endif\n" )
        SET( BLAS_LAPACK_LIBS ${ACML_LIBS} PARENT_SCOPE)
    ELSEIF( USE_MKL ) 
        CONFIGURE_MKL()
        SET( USE_BLAS 1 )
        SET( USE_LAPACK 1 )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_BLAS\n #define USE_BLAS\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_LAPACK\n #define USE_LAPACK\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_MKL\n #define USE_MKL\n #endif\n" )
        SET( BLAS_LAPACK_LIBS ${MKL_LIBS} ${MKL_LIBS} PARENT_SCOPE)
    ELSEIF( USE_ATLAS ) 
        CONFIGURE_ATLAS()
        SET( USE_BLAS 1 )
        SET( USE_LAPACK 1 )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_BLAS\n #define USE_BLAS\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_LAPACK\n #define USE_LAPACK\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_ATLAS\n #define USE_ATLAS\n #endif\n" )
        SET( BLAS_LAPACK_LIBS ${ATLAS_LIBS} PARENT_SCOPE)
    ELSEIF( USE_VECLIB ) 
        CONFIGURE_VECLIB()
        SET( USE_BLAS 1 )
        SET( USE_LAPACK 1 )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_BLAS\n #define USE_BLAS\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_LAPACK\n #define USE_LAPACK\n #endif\n" )
        FILE(APPEND "${BLAS_LAPACK_HEADER}" "#ifndef USE_VECLIB\n #define USE_VECLIB\n #endif\n" )
        SET( BLAS_LAPACK_LIBS ${VECLIB_LIBS} PARENT_SCOPE)
    ELSE()
        IF ( USE_EXT_BLAS )
            SET( USE_BLAS 1 )
        ENDIF()
        IF ( USE_EXT_LAPACK )
            SET( USE_LAPACK 1 )
        ENDIF()
        CONFIGURE_BLAS()
        CONFIGURE_LAPACK()
        IF ( (NOT BLAS_LIBS) OR (NOT LAPACK_LIBS) )
            MESSAGE(FATAL_ERROR "Blas or Lapack libraries not found")
        ENDIF()
        SET( BLAS_LAPACK_LIBS ${LAPACK_LIBS} ${BLAS_LIBS} PARENT_SCOPE)
        CONFIGURE_FILE( "${BlasLapackCMakeDir}/fortran_calls.h" "${BlasLapackInstallDir}/fortran_calls.h" COPYONLY )
        FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${BlasLapackInstallDir}/fortran_calls.h\"\n" )
    ENDIF()
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#endif\n" )
    EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E copy_if_different 
        "${BLAS_LAPACK_HEADER}" "${BlasLapackInstallDir}/blas_lapack.h" )
    SET( USE_BLAS ${USE_BLAS} PARENT_SCOPE)
    SET( USE_LAPACK ${USE_LAPACK} PARENT_SCOPE)
ENDFUNCTION()


# Macro to configure ACML
FUNCTION( CONFIGURE_ACML )
    IF ( NOT ACML_DIRECTORY )
        MESSAGE(FATAL_ERROR "Default search for ACML not supported, set ACML_DIRECTORY" )
    ENDIF()
    VERIFY_PATH( ${ACML_DIRECTORY} )
    VERIFY_PATH( ${ACML_DIRECTORY}/include )
    VERIFY_PATH( ${ACML_DIRECTORY}/lib )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${ACML_DIRECTORY}/include/acml.h\"\n" )
    FIND_LIBRARY( ACML_LIBS NAMES libacml.a PATHS ${ACML_DIRECTORY}/lib  NO_DEFAULT_PATH )
    IF ( ACML_LIBS )
        FOREACH( name libifcoremt_pic.a libimf.a libirc.a libsvml.a )
            FIND_LIBRARY( lib_${name} NAMES ${name} PATHS ${ACML_DIRECTORY}/lib  NO_DEFAULT_PATH )
            IF ( lib_${name} )
                SET( ACML_LIBS ${ACML_LIBS} ${lib_${name}} )
            ENDIF()
        ENDFOREACH()
    ENDIF()
    FIND_LIBRARY( ACML_LIBS NAMES libacml.a PATHS ${ACML_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ACML_LIBS NAMES libacml_dll.lib PATHS ${ACML_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ACML_LIBS NAMES acml      PATHS ${ACML_DIRECTORY}/lib  NO_DEFAULT_PATH )
    SET( ACML_LIBS ${ACML_LIBS} PARENT_SCOPE )
    MESSAGE( "Using acml" )
    MESSAGE( "   ${ACML_LIBS}" )
ENDFUNCTION()


# Macro to configure MKL
MACRO( CONFIGURE_MKL )
    IF ( NOT MKL_DIRECTORY )
        MESSAGE(FATAL_ERROR "Default search for MKL not supported, set MKL_DIRECTORY" )
    ENDIF()
    VERIFY_PATH( ${MKL_DIRECTORY} )
    VERIFY_PATH( ${MKL_DIRECTORY}/include )
    VERIFY_PATH( ${MKL_DIRECTORY}/lib )
    SET( MKL_LIB_PATH ${MKL_DIRECTORY}/lib )
    IF ( EXISTS ${MKL_DIRECTORY}/lib/intel64 )
        SET( MKL_LIB_PATH ${MKL_DIRECTORY}/lib/intel64 )
    ENDIF()
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${MKL_DIRECTORY}/include/mkl_blas.h\"\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${MKL_DIRECTORY}/include/mkl_lapack.h\"\n" )
    FIND_LIBRARY( MKL_SEQ     NAMES libmkl_sequential.a     PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_SEQ     NAMES mkl_sequential          PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_CORE    NAMES libmkl_core.a           PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_CORE    NAMES mkl_core                PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_GF      NAMES libmkl_gf_lp64.a        PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_GF      NAMES mkl_gf_lp64             PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_LP      NAMES mkl_intel_lp64          PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_BLAS    NAMES libmkl_blas95_lp64.a    PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_BLAS    NAMES mkl_blas95_lp64         PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_LAPACK  NAMES libmkl_lapack95_lp64.a  PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    FIND_LIBRARY( MKL_LAPACK  NAMES mkl_lapack95_lp64       PATHS ${MKL_LIB_PATH}  NO_DEFAULT_PATH )
    SET( MKL_LIBS  )
    IF ( MKL_GF )
        SET( MKL_LIBS ${MKL_LIBS} ${MKL_GF})
    ENDIF()
    IF ( MKL_LP )
        SET( MKL_LIBS ${MKL_LIBS} ${MKL_LP})
    ENDIF()
    SET( MKL_LIBS ${MKL_LIBS} ${MKL_LAPACK} ${MKL_BLAS} ${MKL_SEQ} ${MKL_CORE} )
    MESSAGE( "Using mkl" )
    MESSAGE( "   ${MKL_LIBS}" )
ENDMACRO()


# Macro to configure ATLAS
MACRO( CONFIGURE_ATLAS )
    IF ( NOT ATLAS_DIRECTORY )
        MESSAGE(FATAL_ERROR "Default search for ATLAS not supported, set ATLAS_DIRECTORY" )
    ENDIF()
    VERIFY_PATH( ${ATLAS_DIRECTORY} )
    VERIFY_PATH( ${ATLAS_DIRECTORY}/include )
    VERIFY_PATH( ${ATLAS_DIRECTORY}/lib )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "extern \"C\"{ \n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${ATLAS_DIRECTORY}/include/cblas.h\"\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${ATLAS_DIRECTORY}/include/clapack.h\"\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "}\n" )
    FIND_LIBRARY( ATLAS_LAPACK  NAMES liblapack.a  PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_LAPACK  NAMES lapack       PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_F77BLAS NAMES libf77blas.a PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_F77BLAS NAMES f77blas      PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_CBLAS   NAMES libcblas.a   PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_CBLAS   NAMES cblas        PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_ATLAS   NAMES libatlas.a   PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    FIND_LIBRARY( ATLAS_ATLAS   NAMES atlas        PATHS ${ATLAS_DIRECTORY}/lib  NO_DEFAULT_PATH )
    SET( ATLAS_LIBS ${ATLAS_LAPACK} ${ATLAS_F77BLAS} ${ATLAS_CBLAS} ${ATLAS_ATLAS} )
    MESSAGE( "Using atlas" )
    MESSAGE( "   ${ATLAS_LIBS}" )
ENDMACRO()


# Macro to configure VECLIB
FUNCTION( CONFIGURE_VECLIB )
    IF ( NOT VECLIB_DIRECTORY )
        MESSAGE(FATAL_ERROR "Default search for VECLIB not supported, set VECLIB_DIRECTORY" )
    ENDIF()
    VERIFY_PATH( ${VECLIB_DIRECTORY} )
    VERIFY_PATH( ${VECLIB_DIRECTORY}/Headers )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${VECLIB_DIRECTORY}/Headers/cblas.h\"\n" )
    FILE(APPEND ${BLAS_LAPACK_HEADER} "#include \"${VECLIB_DIRECTORY}/Headers/clapack.h\"\n" )
    FIND_LIBRARY( BLAS_LIBRARY    NAMES BLAS    PATHS "${INSTALL_PATH}"  NO_DEFAULT_PATH )
    FIND_LIBRARY( LAPACK_LIBRARY  NAMES LAPACK  PATHS "${INSTALL_PATH}"  NO_DEFAULT_PATH )
    SET( VECLIB_LIBS ${LAPACK_LIBRARY} ${BLAS_LIBRARY} )
    SET( VECLIB_LIBS ${VECLIB_LIBRARY} PARENT_SCOPE )
    MESSAGE( "Using vecLib" )
    MESSAGE( "   ${VECLIB_LIBS}" )
ENDFUNCTION()



# Macro to configure the BLAS
MACRO( CONFIGURE_BLAS )
    # Determine if we want to use BLAS
    CHECK_ENABLE_FLAG( USE_BLAS 1 )
    IF ( USE_BLAS )
        IF ( BLAS_DIRECTORY )
            # The user is specifying the blas directory
            # BP: If we use the variable BLAS_LIBRARIES instead of USER_BLAS in the
            # section immediately below for some reason the FIND_LIBRARY calls
            # fail
            IF ( BLAS_LIB )
                # The user is specifying both the blas directory and the blas library
                FIND_LIBRARY ( USER_BLAS NAMES ${BLAS_LIB} PATHS ${BLAS_DIRECTORY}  NO_DEFAULT_PATH )
                IF ( NOT USER_BLAS )
                    MESSAGE ( FATAL_ERROR "BLAS library not found in ${BLAS_DIRECTORY}" )
                ENDIF()
            ELSE()
                # The user did not specify the library search for a blas library
                FIND_LIBRARY ( USER_BLAS NAMES blas PATHS ${BLAS_DIRECTORY}  NO_DEFAULT_PATH )
                IF ( NOT USER_BLAS )
                    MESSAGE ( FATAL_ERROR "BLAS library not found in ${BLAS_DIRECTORY}" )
                ENDIF()
            ENDIF()
        ELSEIF ( BLAS_LIB )
            # The user is specifying the blas library (search for the file)
            FIND_LIBRARY ( USER_BLAS NAMES ${BLAS_LIB} )
            IF ( NOT USER_BLAS )
                MESSAGE ( FATAL_ERROR "BLAS library not found" )
            ENDIF()
        ELSEIF ( BLAS_LIBRARIES )
            # The user is specifying the blas command directly
            # BP: This check is made after the checks for user specified
            # BLAS_DIRECTORY and/or BLAS_LIB as otherwise the system libraries are found!!
            SET ( USER_BLAS ${BLAS_LIBRARIES})
        ELSE ()
            # The user did not include BLAS directly, perform a search
            INCLUDE ( FindBLAS )
            IF ( NOT BLAS_FOUND )
                MESSAGE ( FATAL_ERROR "BLAS not found.  Try setting BLAS_DIRECTORY or BLAS_LIB" )
            ENDIF()
            SET ( USER_BLAS ${BLAS_LIBRARIES})
        ENDIF()
        SET ( BLAS_LIBS ${USER_BLAS} )
        MESSAGE ( "Using blas" )
        MESSAGE ( "   ${BLAS_LIBS}" )
    ENDIF()
ENDMACRO ()

# Macro to configure the LAPACK
MACRO( CONFIGURE_LAPACK )
    # Determine if we want to use LAPACK
    IF ( USE_LAPACK )
        IF ( LAPACK_DIRECTORY )
            # The user is specifying the lapack directory
            # BP: If we use the variable LAPACK_LIBRARIES instead of USER_BLAS in the
            # section immediately below for some reason the FIND_LIBRARY calls
            # fail
            IF ( LAPACK_LIB )
                # The user is specifying both the lapack directory and the lapack library
                FIND_LIBRARY ( USER_LAPACK NAMES ${LAPACK_LIB} PATHS ${LAPACK_DIRECTORY}  NO_DEFAULT_PATH )
                IF ( NOT USER_LAPACK )
                    MESSAGE ( FATAL_ERROR "LAPACK library not found in ${LAPACK_DIRECTORY}" )
                ENDIF()
            ELSE()
                # The user did not specify the library serach for a lapack library
                FIND_LIBRARY ( USER_LAPACK NAMES lapack PATHS ${LAPACK_DIRECTORY}  NO_DEFAULT_PATH )
                IF ( NOT USER_LAPACK )
                    MESSAGE ( FATAL_ERROR "LAPACK library not found in ${LAPACK_DIRECTORY}" )
                ENDIF()
            ENDIF()
        ELSEIF ( LAPACK_LIB )
            # The user is specifying the lapack library (search for the file)
            FIND_LIBRARY ( USER_LAPACK NAMES ${LAPACK_LIB} )
            IF ( NOT USER_LAPACK )
                MESSAGE ( FATAL_ERROR "LAPACK library not found" )
            ENDIF()
        ELSEIF ( LAPACK_LIBRARIES )
            # The user is specifying the lapack command directly
            # BP: This check is made after the checks for user specified
            # LAPACK_DIRECTORY and/or LAPACK_LIB as otherwise the system libraries are found!!
            SET ( USER_LAPACK ${LAPACK_LIBRARIES})
        ELSE ()
            # The user did not include lapack directly, perform a search
            INCLUDE ( FindLAPACK )
            IF ( NOT LAPACK_FOUND )
                MESSAGE ( FATAL_ERROR "LAPACK not found.  Try setting LAPACK_DIRECTORY or LAPACK_LIB" )
            ENDIF()
            SET ( USER_LAPACK ${LAPACK_LIBRARIES})
        ENDIF()
        SET ( LAPACK_LIBS ${USER_LAPACK} )
        MESSAGE ( "Using lapack" )
        MESSAGE ( "   ${LAPACK_LIBS}" )
    ENDIF()
ENDMACRO ()

